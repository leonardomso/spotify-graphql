{"version":3,"sources":["components/App/App.styles.ts","graphql/query.tsx","modules/Artists/Artists.styles.ts","components/ArtistItem/ArtistItem.styles.ts","components/ArtistItem/ArtistItem.tsx","components/Skeletons/SkeletonArtistItem/SkeletonArtistItem.styles.ts","components/Skeletons/SkeletonArtistItem/SkeletonArtistItem.tsx","modules/Artists/Artists.tsx","modules/Artist/Artist.styles.ts","modules/Artist/Artist.tsx","components/App/App.tsx","graphql/client.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContainer","styled","div","HeaderContainer","header","HeaderInnerContainer","form","QUERY_ARTISTS_BY_NAME","gql","ArtistsContainer","main","ArtistItemContainer","ArtistItemName","Heading","ArtistItem","artist","history","useHistory","onClick","push","pathname","id","state","width","height","objectFit","src","image","fallbackSrc","alt","cursor","color","as","letterSpacing","size","textAlign","name","SkeletonArtistItemContainer","SkeletonArtistItem","startColor","endColor","borderRadius","Artists","loading","data","className","queryArtists","map","ArtistContainer","AlbumsContainer","AlbumContainer","AlbumImage","Image","AlbumTitle","AlbumArtist","Text","Artist","useLocation","justifySelf","albums","alignSelf","fontSize","validationSchema","Yup","shape","byName","required","App","useLazyQuery","queryArtistByName","useForm","mode","reValidateMode","resolver","yupResolver","register","handleSubmit","getValues","onSubmit","variables","type","placeholder","ref","exact","path","component","client","ApolloClient","uri","cache","InMemoryCache","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3026fabe.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const AppContainer = styled.div`\n  width: 100%;\n  height: 100vh;\n  min-height: -webkit-fill-available;\n  padding: 30px;\n  display: grid;\n  grid-template-rows: max-content 1fr;\n  grid-template-columns: 1fr;\n  grid-row-gap: 50px;\n`;\n\nexport const HeaderContainer = styled.header`\n  display: grid;\n  grid-template-rows: max-content max-content;\n  grid-template-columns: 1fr;\n  grid-row-gap: 20px;\n`;\n\nexport const HeaderInnerContainer = styled.form`\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr 120px;\n  grid-template-rows: 1fr;\n  grid-column-gap: 10px;\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const QUERY_ARTISTS_BY_NAME = gql`\n  query QueryArtirtsByName($byName: String) {\n    queryArtists(byName: $byName) {\n      name\n      id\n      image\n      albums {\n        id\n        name\n        image\n        tracks {\n          id\n        }\n      }\n    }\n  }\n`;\n","import styled from \"@emotion/styled\";\n\nexport const ArtistsContainer = styled.main`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 200px);\n  grid-gap: 30px;\n`;\n","import styled from \"@emotion/styled\";\nimport { Heading } from \"@chakra-ui/react\";\n\nexport const ArtistItemContainer = styled.div`\n  width: 200px;\n  height: fit-content;\n  display: grid;\n  grid-template-rows: 200px max-content;\n  grid-template-columns: 1fr;\n  grid-row-gap: 20px;\n`;\n\nexport const ArtistItemName = styled(Heading)`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Image } from \"@chakra-ui/react\";\n\nimport { ArtistItemContainer, ArtistItemName } from \"./ArtistItem.styles\";\n\nimport { ArtistData } from \"../../types\";\n\ninterface Props {\n  artist: ArtistData;\n}\n\nconst ArtistItem = ({ artist }: Props) => {\n  const history = useHistory();\n\n  const redirectToArtistPage = () => {\n    history.push({\n      pathname: `/artist/${artist.id}`,\n      state: { artist }\n    })\n  };\n\n  return (\n    <ArtistItemContainer onClick={redirectToArtistPage}>\n      <Image\n        width=\"200px\"\n        height=\"200px\"\n        objectFit=\"cover\"\n        src={artist.image}\n        fallbackSrc=\"https://www.ecpgr.cgiar.org/fileadmin/templates/ecpgr.org/Assets/images/No_Image_Available.jpg\"\n        alt=\"Image\"\n        cursor=\"pointer\"\n      />\n\n      <ArtistItemName\n        color=\"#101010\"\n        as=\"h2\"\n        letterSpacing=\"-0.03em\"\n        size=\"lg\"\n        textAlign=\"start\"\n        cursor=\"pointer\"\n      >\n        {artist.name}\n      </ArtistItemName>\n    </ArtistItemContainer>\n  );\n}\n\nexport default ArtistItem;","import styled from \"@emotion/styled\";\n\nexport const SkeletonArtistItemContainer = styled.div`\n  width: 200px;\n  height: fit-content;\n  display: grid;\n  grid-template-rows: 200px max-content;\n  grid-template-columns: 1fr;\n  grid-row-gap: 20px;\n`;\n","import React from \"react\";\nimport { Skeleton } from \"@chakra-ui/react\";\n\nimport { SkeletonArtistItemContainer } from \"./SkeletonArtistItem.styles\";\n\nconst SkeletonArtistItem = () => (\n  <SkeletonArtistItemContainer>\n    <Skeleton\n      width=\"200px\"\n      height=\"200px\"\n      startColor=\"#E2E8F0\"\n      endColor=\"#E2E8F0\"\n      borderRadius={3}\n    />\n\n    <Skeleton\n      width=\"100%\" height=\"30px\"\n      startColor=\"#E2E8F0\"\n      endColor=\"#E2E8F0\"\n      borderRadius={3}\n    />\n  </SkeletonArtistItemContainer>\n);\n\nexport default SkeletonArtistItem;","import React from \"react\";\n\nimport { ArtistsContainer } from \"./Artists.styles\";\n\nimport ArtistItem from \"../../components/ArtistItem/ArtistItem\";\n\nimport SkeletonArtistItem from \"../../components/Skeletons/SkeletonArtistItem/SkeletonArtistItem\";\n\nimport { ArtistData } from \"../../types\";\n\ninterface Props {\n  loading: boolean;\n  data: {\n    queryArtists: Array<ArtistData>;\n  };\n}\n\nconst Artists = ({ loading, data }: Props) => (\n  <ArtistsContainer className=\"artists-container\">\n    {loading ? (\n      <>\n        <SkeletonArtistItem />\n        <SkeletonArtistItem />\n        <SkeletonArtistItem />\n        <SkeletonArtistItem />\n        <SkeletonArtistItem />\n        <SkeletonArtistItem />\n      </>\n    ) : null}\n    {data && data.queryArtists.map((artist: ArtistData) => <ArtistItem key={artist.id} artist={artist} />)}\n  </ArtistsContainer>\n);\n\nexport default Artists;","import styled from \"@emotion/styled\";\nimport { Heading, Text, Image } from \"@chakra-ui/react\";\n\nexport const ArtistContainer = styled.main`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 200px max-content max-content;\n  grid-row-gap: 30px;\n`;\n\nexport const AlbumsContainer = styled.div`\n  width: 100%;\n  max-width: 600px;\n  justify-self: center;\n  height: auto;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: repeat(auto-fill, max-content);\n  grid-row-gap: 20px;\n`;\n\nexport const AlbumContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: 80px 1fr;\n  grid-template-rows: 40px 40px;\n  grid-column-gap: 10px;\n`;\n\nexport const AlbumImage = styled(Image)`\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n`;\n\nexport const AlbumTitle = styled(Heading)`\n  grid-column: 2 / 3;\n  grid-row: 1 / 2;\n`;\n\nexport const AlbumArtist = styled(Text)`\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n`;\n","import React from \"react\";\nimport { Image, Heading } from \"@chakra-ui/react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport {\n  ArtistContainer,\n  AlbumsContainer,\n  AlbumContainer,\n  AlbumImage,\n  AlbumTitle,\n  AlbumArtist\n} from \"./Artist.styles\";\n\nimport { ArtistData, ArtistAlbumData } from \"../../types\";\n\ninterface State {\n  state: {\n    artist: ArtistData;\n  };\n}\n\nconst Artist = () => {\n  const { state } = useLocation() as State;\n\n  return (\n    <ArtistContainer>\n      <Image\n        width=\"200px\"\n        height=\"200px\"\n        objectFit=\"cover\"\n        src={state.artist.image}\n        fallbackSrc=\"https://www.ecpgr.cgiar.org/fileadmin/templates/ecpgr.org/Assets/images/No_Image_Available.jpg\"\n        alt=\"Image\"\n        justifySelf=\"center\"\n      />\n\n      <Heading\n        color=\"#101010\"\n        as=\"h2\"\n        letterSpacing=\"-0.03em\"\n        size=\"lg\"\n        textAlign=\"center\"\n        justifySelf=\"center\"\n      >\n        {state.artist.name}\n      </Heading>\n\n      <AlbumsContainer>\n        {state.artist.albums.map(({ id, image, name }: ArtistAlbumData) => (\n          <AlbumContainer key={id}>\n            <AlbumImage src={image} fallbackSrc=\"https://www.ecpgr.cgiar.org/fileadmin/templates/ecpgr.org/Assets/images/No_Image_Available.jpg\" />\n\n            <AlbumTitle\n              color=\"#101010\"\n              as=\"h3\"\n              letterSpacing=\"-0.03em\"\n              size=\"lg\"\n              textAlign=\"start\"\n              alignSelf=\"center\"\n              fontSize={20}\n            >\n              {name}\n            </AlbumTitle>\n\n            <AlbumArtist alignSelf=\"center\">{state.artist.name}</AlbumArtist>\n          </AlbumContainer>\n        ))}\n      </AlbumsContainer>\n    </ArtistContainer>\n  )\n}\n\nexport default Artist;","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { Heading, Input, Button } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\n\nimport {\n  AppContainer,\n  HeaderContainer,\n  HeaderInnerContainer,\n} from \"./App.styles\";\n\nimport { QUERY_ARTISTS_BY_NAME } from \"../../graphql/query\";\n\nimport Artists from \"../../modules/Artists/Artists\";\nimport Artist from \"../../modules/Artist/Artist\";\n\ninterface QueryArtistByNameFormProps {\n  byName: string;\n}\n\nconst validationSchema = Yup.object().shape({\n  byName: Yup.string().required(\"Artist name is required\"),\n});\n\nconst App = () => {\n  const [queryArtistByName, { loading, data }] = useLazyQuery(QUERY_ARTISTS_BY_NAME);\n\n  const { register, handleSubmit, getValues } = useForm<QueryArtistByNameFormProps>({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = () => {\n    queryArtistByName({ variables: { byName: getValues().byName } })\n  }\n\n  return (\n    <BrowserRouter>\n      <AppContainer>\n        <HeaderContainer>\n          <Heading\n            color=\"#101010\"\n            as=\"h1\"\n            letterSpacing=\"-0.03em\"\n            textAlign=\"start\"\n            justifySelf=\"center\"\n          >\n            Spotify GraphQL\n          </Heading>\n\n          <HeaderInnerContainer onSubmit={handleSubmit(onSubmit)}>\n            <Input\n              type=\"text\"\n              name=\"byName\"\n              placeholder=\"Search artist by name\"\n              size=\"lg\"\n              ref={register}\n            />\n            <Button type=\"submit\" size=\"lg\">\n              Search\n          </Button>\n          </HeaderInnerContainer>\n        </HeaderContainer>\n\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={() => <Artists loading={loading} data={data} />} />\n            <Route exact path=\"/artist/:id\" component={Artist} />\n          </Switch>\n        </div>\n      </AppContainer>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://spotify-graphql-server.herokuapp.com/graphql\",\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from './components/App/App';\n\nimport client from \"./graphql/client\";\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <ChakraProvider>\n          <App />\n        </ChakraProvider>\n      </BrowserRouter>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}